"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsutils = require("tsutils");
var ts = require("typescript");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var _this = this;
        var ruleArguments = this.getOptions().ruleArguments;
        var _a = tslib_1.__read(ruleArguments, 1), options = _a[0];
        var allowLocal = options ? options.allowLocal : false;
        var failures = [];
        var constKeywords = tsquery_1.tsquery(sourceFile, "EnumDeclaration > ConstKeyword");
        constKeywords.forEach(function (node) {
            var enumDeclaration = node.parent;
            if (allowLocal &&
                !tsutils.hasModifier(enumDeclaration.modifiers, ts.SyntaxKind.ExportKeyword)) {
                return;
            }
            failures.push(new Lint.RuleFailure(sourceFile, enumDeclaration.getStart(), enumDeclaration.getStart() + enumDeclaration.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
        });
        return failures;
    };
    Rule.metadata = {
        description: "Disallows the use of const enums.",
        options: {
            properties: {
                allowLocal: { type: "boolean" }
            },
            type: "object"
        },
        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n      An optional object with an optional `allowLocal` property - which defaults to `false`.\n      If `allowLocal` is `true`, only exported const enums are forbidden."], ["\n      An optional object with an optional \\`allowLocal\\` property - which defaults to \\`false\\`.\n      If \\`allowLocal\\` is \\`true\\`, only exported const enums are forbidden."]))),
        requiresTypeInfo: false,
        ruleName: "no-const-enum",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "const enum is forbidden";
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var templateObject_1;
