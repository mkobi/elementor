"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var _this = this;
        var failures = [];
        var statements = tsquery_1.tsquery(sourceFile, "CallExpression[expression.text=\"it\"] ExpressionStatement, CallExpression[expression.text=\"it\"] VariableStatement");
        statements.forEach(function (statement) {
            var index = sourceFile.text.indexOf("\n", statement.end);
            if (index !== -1) {
                var trailing = sourceFile.text.substring(statement.end, index);
                var match = trailing.match(/\s*\/\/\s*(.+)$/);
                if (match) {
                    var _a = tslib_1.__read(match, 2), expectation = _a[1];
                    var pos = statement.end + trailing.indexOf(expectation);
                    var end = pos + expectation.length;
                    if (/^(\$\s+)?Expect/.test(expectation)) {
                        failures.push(new Lint.RuleFailure(sourceFile, pos, end, Rule.FAILURE_STRING, _this.ruleName));
                        return;
                    }
                    if (!/^\$Expect/.test(expectation)) {
                        return;
                    }
                    if (!/^\$Expect(Type\s*|Error\s*$|Deprecation\s*$|NoDeprecation\s*$)/.test(expectation)) {
                        failures.push(new Lint.RuleFailure(sourceFile, pos, end, Rule.FAILURE_STRING, _this.ruleName));
                        return;
                    }
                    if (!/^\$ExpectType/.test(expectation)) {
                        return;
                    }
                    if (!/^\$ExpectType\s+[^\s]/.test(expectation)) {
                        failures.push(new Lint.RuleFailure(sourceFile, pos, end, Rule.FAILURE_STRING, _this.ruleName));
                        return;
                    }
                }
            }
        });
        return failures;
    };
    Rule.metadata = {
        description: "Disallows dtslint expectations that have typographical errors.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: false,
        ruleName: "no-dtslint-typo",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Typo in dtslint expectation";
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
