"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var support_1 = require("../support");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var statements = tsquery_1.tsquery(sourceFile, "CallExpression[expression.text=\"it\"] ExpressionStatement, CallExpression[expression.text=\"it\"] VariableStatement");
        statements.forEach(function (statement) {
            var index = sourceFile.text.indexOf("\n", statement.end);
            if (index !== -1) {
                var trailing = sourceFile.text.substring(statement.end, index);
                var match = trailing.match(/^\s*\/\/\s*(\$ExpectDeprecation|\$ExpectNoDeprecation)\s*$/);
                if (match) {
                    var idendtifers = tsquery_1.tsquery(statement, "Identifier");
                    var found = idendtifers.some(function (idendtifer) { return support_1.getDeprecation(idendtifer, typeChecker) !== undefined; });
                    var _a = tslib_1.__read(match, 2), expectation = _a[1];
                    var pos = statement.end + trailing.indexOf(expectation);
                    var end = pos + expectation.length;
                    if (expectation === "$ExpectDeprecation") {
                        if (!found) {
                            failures.push(new Lint.RuleFailure(sourceFile, pos, end, "No deprecation found", _this.ruleName));
                        }
                    }
                    else {
                        if (found) {
                            failures.push(new Lint.RuleFailure(sourceFile, pos, end, "Deprecation found", _this.ruleName));
                        }
                    }
                }
            }
        });
        return failures;
    };
    Rule.metadata = {
        description: "Asserts deprecations with $ExpectDeprecation and $ExpectNoDeprecation.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "expect-deprecation",
        type: "functionality",
        typescriptOnly: true
    };
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
