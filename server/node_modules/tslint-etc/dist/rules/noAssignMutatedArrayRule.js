"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsutils = require("tsutils");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var support_1 = require("../support");
var mutatorRegExp = /^(fill|reverse|sort|splice)$/;
var creatorRegExp = /^(concat|entries|filter|keys|map|slice|values)$/;
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var identifiers = tsquery_1.tsquery(sourceFile, "CallExpression PropertyAccessExpression Identifier[name=" + mutatorRegExp.toString() + "]");
        identifiers.forEach(function (node) {
            var identifier = node;
            var propertyAccessExpression = identifier.parent;
            var callExpression = identifier.parent.parent;
            var parent = callExpression.parent;
            if (!tsutils.isExpressionStatement(parent)) {
                var type = typeChecker.getTypeAtLocation(propertyAccessExpression.expression);
                if (support_1.couldBeType(type, "Array") &&
                    _this.mutatesReferencedArray(callExpression)) {
                    failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
                }
            }
        });
        return failures;
    };
    Rule.prototype.mutatesReferencedArray = function (callExpression) {
        if (tsutils.isPropertyAccessExpression(callExpression.expression)) {
            var propertyAccessExpression = callExpression.expression;
            var expression = propertyAccessExpression.expression, name_1 = propertyAccessExpression.name;
            if (creatorRegExp.test(name_1.getText())) {
                return false;
            }
            if (tsutils.isCallExpression(expression)) {
                return this.mutatesReferencedArray(expression);
            }
            if (tsutils.isArrayLiteralExpression(expression)) {
                return false;
            }
        }
        return true;
    };
    Rule.metadata = {
        description: "Disallows the assignment of returned, mutated arrays.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "no-assign-mutated-array",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Assignment of mutated arrays is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
