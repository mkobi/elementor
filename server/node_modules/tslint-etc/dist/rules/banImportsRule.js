"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions()));
    };
    Rule.metadata = {
        description: "Disallows the use of banned imports.",
        options: {
            type: "object"
        },
        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n      An object containing keys that are regular expressions\n      and values that are either booleans or strings containing the explanation for the ban."], ["\n      An object containing keys that are regular expressions\n      and values that are either booleans or strings containing the explanation for the ban."]))),
        requiresTypeInfo: false,
        ruleName: "ban-imports",
        type: "functionality",
        typescriptOnly: false
    };
    Rule.FAILURE_STRING = "Import is banned";
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    tslib_1.__extends(Walker, _super);
    function Walker(sourceFile, rawOptions) {
        var _this = _super.call(this, sourceFile, rawOptions) || this;
        _this._bans = [];
        var _a = tslib_1.__read(_this.getOptions(), 1), options = _a[0];
        if (options) {
            Object.entries(options).forEach(function (_a) {
                var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
                if (value !== false) {
                    _this._bans.push({
                        explanation: typeof value === "string" ? value : "",
                        regExp: new RegExp(key)
                    });
                }
            });
        }
        return _this;
    }
    Walker.prototype.visitImportDeclaration = function (node) {
        var _bans = this._bans;
        var moduleSpecifier = node.moduleSpecifier.getText().replace(/['"]/g, "");
        for (var b = 0, length_1 = _bans.length; b < length_1; ++b) {
            var ban = _bans[b];
            if (ban.regExp.test(moduleSpecifier)) {
                var explanation = ban.explanation ? ": " + ban.explanation : "";
                var failure = Rule.FAILURE_STRING + ": '" + moduleSpecifier + "' matches " + ban.regExp.toString() + explanation;
                this.addFailureAtNode(node.moduleSpecifier, failure);
            }
        }
        _super.prototype.visitImportDeclaration.call(this, node);
    };
    return Walker;
}(Lint.RuleWalker));
var templateObject_1;
