"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var _this = this;
        var failures = [];
        var identifiers = tsquery_1.tsquery(sourceFile, "TypeParameter > Identifier[name=/^.$/]");
        identifiers.forEach(function (identifier) {
            failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
        });
        var ruleArguments = this.getOptions().ruleArguments;
        var _a = tslib_1.__read(ruleArguments, 1), _b = _a[0], options = _b === void 0 ? {} : _b;
        var prefix = options.prefix;
        if (prefix) {
            var identifiers_1 = tsquery_1.tsquery(sourceFile, "TypeParameter > Identifier[name=/^.{2,}$/]");
            identifiers_1.forEach(function (identifier) {
                var text = identifier.text;
                if (text.indexOf(prefix) !== 0) {
                    failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_MESSAGE_PREFIX(text, prefix), _this.ruleName));
                }
            });
        }
        return failures;
    };
    Rule.metadata = {
        description: "Disallows single-character type parameters.",
        options: {
            properties: {
                prefix: { type: "string" }
            },
            type: "object"
        },
        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n      An optional object with an optional `prefix` property.\n      If a `prefix` is specified, type parameters without the prefix are forbidden."], ["\n      An optional object with an optional \\`prefix\\` property.\n      If a \\`prefix\\` is specified, type parameters without the prefix are forbidden."]))),
        requiresTypeInfo: false,
        ruleName: "no-t",
        type: "style",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Single-character type parameters are forbidden";
    Rule.FAILURE_MESSAGE_PREFIX = function (name, prefix) {
        return "Type parameter '" + name + "' does not have prefix '" + prefix + "'";
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var templateObject_1;
