"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsutils = require("tsutils");
var support_1 = require("../support");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program));
    };
    Rule.metadata = {
        description: "Enforces the use of `Error` values when throwing or rejecting.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "throw-error",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Throwing non-Error values is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    tslib_1.__extends(Walker, _super);
    function Walker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._callbacks = new Map();
        _this._rejects = new Map();
        return _this;
    }
    Walker.prototype.visitArrowFunction = function (node) {
        var _a;
        var reject = undefined;
        if (this._callbacks.has(node)) {
            _a = tslib_1.__read(node.parameters, 2), reject = _a[1];
        }
        if (reject) {
            this._rejects.set(reject, true);
        }
        _super.prototype.visitArrowFunction.call(this, node);
        if (reject) {
            this._rejects.delete(reject);
        }
    };
    Walker.prototype.visitCallExpression = function (node) {
        var _a = tslib_1.__read(node.arguments, 1), argument = _a[0], expression = node.expression;
        var typeChecker = this.getTypeChecker();
        if (tsutils.isPropertyAccessExpression(expression)) {
            var name_1 = expression.name.getText();
            var type = typeChecker.getTypeAtLocation(expression.expression);
            if (name_1 === "reject" && couldBePromise(type)) {
                var fail = true;
                if (argument) {
                    var argumentType = typeChecker.getTypeAtLocation(argument);
                    fail = !(support_1.isAny(argumentType) || support_1.couldBeType(argumentType, "Error"));
                }
                if (fail) {
                    this.addFailureAtNode(node, Rule.FAILURE_STRING);
                }
            }
        }
        else if (tsutils.isIdentifier(expression)) {
            var declaration = support_1.findDeclaration(expression, typeChecker);
            if (declaration && this._rejects.has(declaration)) {
                var fail = true;
                if (argument) {
                    var argumentType = typeChecker.getTypeAtLocation(argument);
                    fail = !(support_1.isAny(argumentType) || support_1.couldBeType(argumentType, "Error"));
                }
                if (fail) {
                    this.addFailureAtNode(node, Rule.FAILURE_STRING);
                }
            }
        }
        _super.prototype.visitCallExpression.call(this, node);
    };
    Walker.prototype.visitFunctionExpression = function (node) {
        var _a;
        var reject = undefined;
        if (this._callbacks.has(node)) {
            _a = tslib_1.__read(node.parameters, 2), reject = _a[1];
        }
        if (reject) {
            this._rejects.set(reject, true);
        }
        _super.prototype.visitFunctionExpression.call(this, node);
        if (reject) {
            this._rejects.delete(reject);
        }
    };
    Walker.prototype.visitNewExpression = function (node) {
        var _a;
        var typeChecker = this.getTypeChecker();
        var type = typeChecker.getTypeAtLocation(node.expression);
        var callback = undefined;
        if (couldBePromise(type)) {
            _a = tslib_1.__read(node.arguments, 1), callback = _a[0];
        }
        if (callback) {
            this._callbacks.set(callback, true);
        }
        _super.prototype.visitNewExpression.call(this, node);
        if (callback) {
            this._callbacks.delete(callback);
        }
    };
    Walker.prototype.visitThrowStatement = function (node) {
        var typeChecker = this.getTypeChecker();
        var type = typeChecker.getTypeAtLocation(node.expression);
        if (!support_1.isAny(type) && !support_1.couldBeType(type, "Error")) {
            this.addFailureAtNode(node, Rule.FAILURE_STRING);
        }
        _super.prototype.visitThrowStatement.call(this, node);
    };
    return Walker;
}(Lint.ProgramAwareRuleWalker));
exports.Walker = Walker;
function couldBePromise(type) {
    return support_1.couldBeType(type, /^Promise/);
}
