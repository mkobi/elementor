"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
function couldImplement(type, name, qualified) {
    var symbol = type.symbol;
    if (symbol) {
        var valueDeclaration = symbol.valueDeclaration;
        if (valueDeclaration && ts.isClassDeclaration(valueDeclaration)) {
            var heritageClauses = valueDeclaration.heritageClauses;
            if (heritageClauses) {
                var implemented = heritageClauses.some(function (_a) {
                    var token = _a.token, types = _a.types;
                    return token === ts.SyntaxKind.ImplementsKeyword &&
                        types.some(function (node) { return isMatchingNode(node, name, qualified); });
                });
                if (implemented) {
                    return true;
                }
            }
        }
    }
    return false;
}
exports.couldImplement = couldImplement;
function isMatchingNode(node, name, qualified) {
    if (qualified) {
        var type = qualified.typeChecker.getTypeAtLocation(node);
        if (type) {
            var qualifiedName = qualified.typeChecker.getFullyQualifiedName(type.symbol);
            if (!qualified.name.test(qualifiedName)) {
                return false;
            }
        }
    }
    var text = node.getText();
    return typeof name === "string" ? text === name : Boolean(text.match(name));
}
